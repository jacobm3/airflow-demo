
from datetime import datetime, timedelta
from textwrap import dedent

# The DAG object; we'll need this to instantiate a DAG
from airflow import DAG

# Operators; we need this to operate!
from airflow.operators.bash import BashOperator
with DAG(
    'jinja_dag_v00',
    # These args will get passed on to each operator
    # You can override them on a per-task basis during operator initialization
    default_args={
        'depends_on_past': False,
        'email': ['airflow@example.com'],
        'email_on_failure': False,
        'email_on_retry': False,
        'retries': 1,
        'retry_delay': timedelta(minutes=5),
    },
    description='DAG dynamically generated with jinja2',
    schedule_interval=timedelta(hours=6),
    start_date=datetime(2022, 5, 10),
    catchup=False,
    max_active_runs=1,
    tags=['example'],
) as dag:

    t0 = BashOperator(
        task_id='print_date',
        bash_command='date',
    )

{% for n in range(1,5) %}

    t{{n}} = BashOperator(
        task_id='t{{n}}_sleep',
        depends_on_past=False,
        bash_command='date',
    )
    t0 >> t{{n}}

  {% for m in range(1,5) %}
    t{{n}}_{{m}} = BashOperator(
        task_id='t{{n}}_{{m}}_sleep',
        depends_on_past=False,
        bash_command='date',
    )
    t{{n}} >> t{{n}}_{{m}}

  {% for p in range(1,20) %}
    t{{n}}_{{m}}_{{p}} = BashOperator(
        task_id='t{{n}}_{{m}}_{{p}}_sleep',
        depends_on_past=False,
        bash_command='date; sleep $[ ( $RANDOM % 3 )  + 1 ]s;date',
    )

    # if p==1, link to t{{n}}_{{m}},
    # else link to t{{n}}_{{m}}_{{p-1}}
    {% if p == 1 -%}
    t{{n}}_{{m}} >> t{{n}}_{{m}}_{{p}}
    {% else -%}
    t{{n}}_{{m}}_{{p-1}} >> t{{n}}_{{m}}_{{p}}
    {% endif %}

  {% endfor %}
  {% endfor %}

{% endfor %}


